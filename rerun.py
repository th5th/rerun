#!/usr/bin/python
import os
import subprocess

# Modify a config.mk then make and run the project.
# use triple hash markup in confug.mk to find bits to write

def write_config(f, conf):
    f.write("# Autogenerated config:" + os.linesep)
    for conf_item in conf:
        f.write(conf_item + os.linesep)

def process_files(inp_path, out_path, conf):
    """
    Scan inp_path for a ### mark and call write_config when found
    """
    with open(inp_path, 'r') as inp:
        with open(out_path, 'w') as out:
            for inp_line in inp:
                if inp_line.startswith("###"):
                    # got insert marker
                    write_config(out, conf)
                else:
                    # just copy the line over
                    out.write(inp_line)

def rerun(inp_path, out_path, configs, cmds = []):
    """
    Produce the output Makefile with the provided configs, then run everything.

    Configs should be a iterable of lines to insert into the definition file at
    inp_path. Cmds is a list of commands to be passed to subprocess.check_call.
    """
    for config in configs:
        process_files(inp_path, out_path, config)
        for cmd in cmds:
            subprocess.check_call(cmd)

if __name__ == "__main__":
    inp_path = os.path.join(os.getcwd(), "config.mk.def")
    out_path = os.path.join(os.getcwd(), "config.mk")
    configs = [[r"CFLAGS += -DFLAG1=\"first\" -DFLAG2=\"first2\""],
            [r"CFLAGS += -DFLAG1=\"second\" -DFLAG2=\"second2\""]]

    cmds = [["make", "clean"], ["make"], [os.path.join(os.getcwd(), "rerun_test")]]

    rerun(inp_path, out_path, configs, cmds)
